{"version":3,"sources":["webpack:///./src/components/Item.jsx","webpack:///./src/components/Gallery.jsx","webpack:///./src/components/Container.jsx","webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js"],"names":["StyledItem","styled","div","props","width","gap","Item","image","to","slug","fluid","className","title","defaultProps","StyledGallery","partitions","Gallery","images","columns","Array","fill","map","forEach","idx","push","column","key","src","StyledConainer","Container","children","pageQuery","IndexPage","data","edges","artists","html","text","Layout","SEO","Title","style","textAlign","dangerouslySetInnerHTML","__html","node","frontmatter","featured","full","name","$export","P"],"mappings":"0QAMMA,EAAaC,IAAOC,IAAV,uEAAGD,CAAH,8WACL,SAACE,GAAD,OAAWA,EAAMC,SAET,SAACD,GAAD,OAAWA,EAAME,OAyB9BC,EAAO,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAOF,EAAjB,EAAiBA,IAAjB,OACX,kBAACL,EAAD,CAAYI,MAAOA,EAAOC,IAAKA,GAC7B,kBAAC,OAAD,CAAMG,GAAE,IAAMD,EAAME,MAClB,kBAAC,IAAD,CAAKC,MAAOH,IACZ,yBAAKI,UAAW,SAAUJ,EAAMK,UAWtCN,EAAKO,aAAe,CAClBT,MAAO,IACPC,IAAK,GAGQC,QChDTQ,EAAgBb,IAAOC,IAAV,4EAAGD,CAAH,uKAEe,SAACE,GAAD,OAAWA,EAAMY,cACrC,SAACZ,GAAD,OAAWA,EAAME,OAUzBW,EAAU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQF,EAAsB,EAAtBA,WAAYV,EAAU,EAAVA,IAC/Ba,EAAUC,MAAMJ,GACnBK,KAAK,MACLC,KAAI,iBAAM,MAKb,OAJAJ,EAAOK,SAAQ,SAACf,EAAOgB,GACrBL,EAAQK,EAAMR,GAAYS,KAAKjB,MAI/B,kBAACO,EAAD,CAAeC,WAAYA,EAAYV,IAAKA,GACzCa,EAAQG,KAAI,SAACI,EAAQF,GAAT,OACX,yBAAKG,IAAKH,GACPE,EAAOJ,KAAI,SAACd,GAAD,OACV,kBAAC,EAAD,CAAMmB,IAAKnB,EAAMoB,IAAKtB,IAAKA,EAAKE,MAAOA,aAcnDS,EAAQH,aAAe,CACrBE,WAAY,EACZV,IAAK,GAGQW,QChDTY,EAAiB3B,IAAOC,IAAV,+EAAGD,CAAH,gEAQL4B,EAFG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAACF,EAAD,KAAiBE,I,YC6BxCC,GAFEC,UA3BG,SAAC,GAAD,QAChBC,KACaC,EAFG,EAEdC,QAAWD,MACHE,EAHM,EAGdC,KAAQD,KAHM,OAMhB,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK3B,MAAM,SAEX,kBAAC,EAAD,KACE,kBAAC4B,EAAA,EAAD,8BACA,uBAAGC,MAAO,CAAEC,UAAW,YACrB,yBAAKC,wBAAyB,CAAEC,OAAQR,OAI5C,kBAAC,EAAD,CACElB,QAAS,EACTD,OAAQiB,EAAMb,KAAI,gBAAGwB,EAAH,EAAGA,KAAH,wBACbA,EAAKC,YAAYC,SAASC,KAAKtC,MADlB,CAEhBE,MAAOiC,EAAKC,YAAYG,KACxBxC,KAAMoC,EAAKC,YAAYrC,cAQT,e,qBCrCtB,IAAIyC,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,QAAS,CAAE/B,KAAM,EAAQ,UAE5C,EAAQ,OAAR,CAAiC","file":"component---src-pages-index-js-2f5fab5ed344c38e3740.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby-plugin-intl';\n\nconst StyledItem = styled.div`\n  width: ${(props) => props.width}%;\n  display: inline-block;\n  margin-bottom: ${(props) => props.gap}rem;\n  position: relative;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);\n  .title {\n    transition: all 0.5s;\n    opacity: 0;\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    background-color: rgba(66, 33, 99, 0.7);\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    z-index: 400;\n    color: white;\n    text-transform: lowercase;\n  }\n\n  &:hover .title {\n    opacity: 1;\n  }\n`;\n\nconst Item = ({ width, image, gap }) => (\n  <StyledItem width={width} gap={gap}>\n    <Link to={`/${image.slug}`}>\n      <Img fluid={image} />\n      <div className={'title'}>{image.title}</div>\n    </Link>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  image: PropTypes.object,\n  width: PropTypes.number,\n  gap: PropTypes.number,\n};\n\nItem.defaultProps = {\n  width: 100,\n  gap: 1,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Item from './Item';\nimport styled from 'styled-components';\n\nconst StyledGallery = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.partitions}, 1fr);\n  grid-gap: ${(props) => props.gap}rem;\n  margin: 0 70px;\n  @media only screen and (max-width: 980px) {\n    & {\n      grid-template-columns: 1fr;\n      margin: 0;\n    }\n  }\n`;\n\nconst Gallery = ({ images, partitions, gap }) => {\n  const columns = Array(partitions)\n    .fill(null)\n    .map(() => []);\n  images.forEach((image, idx) => {\n    columns[idx % partitions].push(image);\n  });\n\n  return (\n    <StyledGallery partitions={partitions} gap={gap}>\n      {columns.map((column, idx) => (\n        <div key={idx}>\n          {column.map((image) => (\n            <Item key={image.src} gap={gap} image={image} />\n          ))}\n        </div>\n      ))}\n    </StyledGallery>\n  );\n};\n\nGallery.propTypes = {\n  images: PropTypes.array,\n  partitions: PropTypes.number,\n  gap: PropTypes.number,\n};\n\nGallery.defaultProps = {\n  partitions: 3,\n  gap: 1,\n};\n\nexport default Gallery;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledConainer = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 1.0875rem 1.45rem;\n`;\n\nconst Container = ({ children }) => <StyledConainer>{children}</StyledConainer>;\n\nexport default Container;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Gallery from '../components/Gallery';\nimport Container from '../components/Container';\nimport Title from '../components/Title';\n\nconst IndexPage = ({\n  data: {\n    artists: { edges },\n    text: { html },\n  },\n}) => (\n  <Layout>\n    <SEO title=\"Home\" />\n\n    <Container>\n      <Title>Creatividad Confinada</Title>\n      <p style={{ textAlign: 'justify' }}>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      </p>\n    </Container>\n\n    <Gallery\n      columns={3}\n      images={edges.map(({ node }) => ({\n        ...node.frontmatter.featured.full.fluid,\n        title: node.frontmatter.name,\n        slug: node.frontmatter.slug,\n      }))}\n    />\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query($language: String) {\n    text: markdownRemark(\n      frontmatter: { id: { eq: \"home/intro\" }, lang: { eq: $language } }\n      fileInfo: { sourceInstanceName: { eq: \"pages\" } }\n    ) {\n      html\n    }\n    artists: allMarkdownRemark(\n      filter: {\n        fileInfo: { sourceInstanceName: { eq: \"artists\" } }\n        frontmatter: { lang: { eq: $language } }\n      }\n      sort: { fields: frontmatter___name, order: ASC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            slug\n            lang\n            name\n            featured {\n              full: childImageSharp {\n                fluid(quality: 95) {\n                  aspectRatio\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n"],"sourceRoot":""}